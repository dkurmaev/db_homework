Задача 1. Вывести названия двух произвольных треков с тегом new

  db.tracks.aggregate([
  { $match: { tags: 'new' } }, 
  { $sample: { size: 2 } },    
  { $project: { title: 1, _id: 0 } } 
])
------------------------------------------------------------------
Задача 2. Вывести имя юзера с самым минимальным балансом

  db.users.aggregate([
    {
        $sort: { balance: 1 }
    },    
    {
        $project: { _id: 0, fullname: 1 }
    },
    {
        $limit: 1
    },
])
------------------------------------------------------------------------

Задача 3. Вывести имена юзеров, у которых есть треки

  db.users.aggregate([
    {
        $lookup: {
            from: 'tracks',
            localField: '_id',
            foreignField: 'author_id',
            as: 'tracks'
        }
    },
    {
        $match: {
            'tracks': { $ne: [] }
        }
    },
    {
        $project: { _id: 0, fullname: 1 }
    }
])
---------------------------------------------------------------------------------

Задача 4. Используя метод aggregate(), вывести ко-во юзеров с балансом до 1000 EUR
  
  db.users.aggregate([
  {
    $match: { balance: { $lte: 1000 }}
  },
  {
    $group: { _id: 0, count: { $sum: 1 }}
  },
  {
    $project: {_id: 0, count: 1}
  }
])
--------------------------------------------------------------------------------------

Задача 5. Также очень коротко опишите, как работает агрегация в MongoDB

 5.1 Агрегация в MongoDB работает следующим образом:

-- Выбираем коллекцию (таблицу) и определяем последовательность операций, называемую пайплайном.

-- Пайплайн состоит из разных этапов, таких как фильтрация, сортировка, группировка, проекция и другие операции для обработки данных.

-- Каждый этап пайплайна применяется к данным последовательно. Например, сначала выполняется фильтрация, затем сортировка и так далее.

-- На каждом этапе мы можем преобразовывать и фильтровать данные, чтобы получить нужный результат.

-- В конечном итоге, агрегация возвращает обработанные данные в форме, которая соответствует нашим требованиям.

5.2 Основные стадии (этапы) обработки в пайплайне агрегации MongoDB включают:

-- $match: Этот этап используется для фильтрации документов в коллекции. Он выбирает только документы, которые соответствуют заданным условиям.

-- $project: Этот этап позволяет выбрать конкретные поля из документов или создавать новые поля с вычислениями.

-- $group: С этим этапом вы можете группировать документы по заданным критериям и выполнять агрегирующие операции, такие как суммирование, подсчет, среднее значение и другие.

-- $sort: Этот этап используется для сортировки результатов по заданным полям и направлениям (возрастанию или убыванию).

-- $limit: С помощью этого этапа можно ограничить количество документов, которые попадут в итоговый результат.

-- $skip: Этот этап позволяет пропустить определенное количество документов в результате.

-- $unwind: Используется для разбиения массивов в документах на отдельные документы.

-- $lookup: Этот этап выполняет операцию "соединения" между двумя коллекциями, что позволяет объединить данные из разных коллекций.

